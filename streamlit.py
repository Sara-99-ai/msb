# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tx1fUKHfAGcFhzBM23DTdNHQGzeuIWDI
"""

# # Streamlit Application

import streamlit as st
import joblib
import pandas as pd

# Streamlit page configuration (move this to the top)
st.set_page_config(page_title="Mortgage Prediction Application", layout="wide")

# Load the model
try:
    pipeline = joblib.load('logistic_linear_models.pkl')
    if pipeline is None:
        st.error("Model loading failed. 'pipeline' is None.")
    else:
        st.success("Model loaded successfully.")
except Exception as e:
    st.error(f"Error loading model: {str(e)}")

# Custom CSS for styling
st.markdown("""
    <style>
        .stButton > button {
            background-color: #4CAF50; /* Green */
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
        }
        .stButton > button:hover {
            background-color: #45a049; /* Darker green */
        }
        .stNumberInput > div {
            margin-bottom: 10px;
        }
        .stSelectbox > div {
            margin-bottom: 10px;
        }
        .stTitle {
            font-size: 36px;
            font-weight: bold;
            color: #333;
        }
        .stHeader {
            font-size: 28px;
            font-weight: bold;
            color: #555;
            margin-top: 20px;
        }
        .stWrite {
            font-size: 16px;
            color: #666;
        }
    </style>
""", unsafe_allow_html=True)

st.title(":blue[Mortgage Prediction Application]")

# Collect user inputs
st.header(":green[Enter Details]")

# Input fields for the simplified dataframe
col1, col2 = st.columns(2)

with col1:
    credit_score = st.number_input("Credit Score", min_value=0, step=1)
    dti = st.number_input("Debt-to-Income Ratio (%)", min_value=0, value=30, step=1)
    orig_upb = st.number_input("Original UPB (Unpaid Principal Balance)", min_value=0, value=150000, step=1000)
    ltv = st.number_input("Loan-to-Value Ratio (%)", min_value=0, value=80, step=1)
    orig_interest_rate = st.number_input("Original Interest Rate (%)", min_value=0.0, value=3.5, step=0.01)
    ever_delinquent = st.selectbox("Ever Delinquent (0 or 1)", [0, 1])
    months_delinquent = st.number_input("Months Delinquent", min_value=0, value=0, step=1)
    months_in_repayment = st.number_input("Months in Repayment", min_value=0, value=24, step=1)

with col2:
    loan_age_years = st.number_input("Loan Age (years)", min_value=0, value=2, step=1)
    monthly_payment = st.number_input("Monthly Payment", min_value=0, value=1000, step=50)
    total_payment = st.number_input("Total Payment", min_value=0, value=24000, step=100)
    interest_amount = st.number_input("Interest Amount", min_value=0, value=5000, step=100)
    cur_principal = st.number_input("Current Principal", min_value=0, value=100000, step=1000)
    monthly_income = st.number_input("Monthly Income", min_value=0, value=5000, step=100)
    prepayment = st.number_input("Prepayment", min_value=0, value=0, step=100)

# Create a DataFrame from user inputs
user_input_df = pd.DataFrame([{
            'CreditScore': credit_score,
            'DTI': dti,
            'OrigUPB': orig_upb,
            'LTV': ltv,
            'OrigInterestRate': orig_interest_rate,
            'EverDelinquent': ever_delinquent,
            'MonthsDelinquent': months_delinquent,
            'MonthsInRepayment': months_in_repayment,
            'LoanAge_years': loan_age_years,
            'monthly_payment': monthly_payment,
            'total_payment': total_payment,
            'interest_amount': interest_amount,
            'cur_principal': cur_principal,
            'monthly_income': monthly_income,
            'prepayment': prepayment
    }])

# Display the DataFrame to the user
st.write("### :orange[User Input DataFrame:]")
st.write(user_input_df)

# Predict and display results
if st.button('Predict Classification and Regression'):
    if pipeline:
        try:
            # Ensure the pipeline has both classification and regression models
            predictions = pipeline.predict(user_input_df)

            # Assuming pipeline.predict() returns a tuple (classification, regression)
            if len(predictions) == 2:
                y_class_pred, y_reg_pred = predictions
                st.subheader("Prediction Results")
                st.write(f"*Classification Prediction (Ever Delinquent):* {y_class_pred[0]}")
                st.write(f"*Regression Prediction (Prepayment):* {y_reg_pred[0]}")
            else:
                st.write(f"Prediction: {predictions[0]}")

        except AttributeError as e:
            st.error(f"Prediction error: {e}")
        except Exception as e:
            st.error(f"An error occurred during prediction: {str(e)}")
    else:
        st.error("Model pipeline not loaded. Please check your model file.")
